/// <reference types="node" />
import { UIExtensionTypes, ExtensionTypes } from '../../constants.js';
import { dependency, schema, output } from '@shopify/cli-kit';
import { DotEnvFile } from '@shopify/cli-kit/node/dot-env';
export interface IdentifiersExtensions {
    [localIdentifier: string]: string;
}
export interface Identifiers {
    /** Application's API Key */
    app: string;
    /**
     * The extensions' unique identifiers.
     */
    extensions: IdentifiersExtensions;
    /**
     * The extensions' numeric identifiers (expressed as a string).
     */
    extensionIds: IdentifiersExtensions;
}
export declare type UuidOnlyIdentifiers = Omit<Identifiers, 'extensionIds'>;
export declare const AppConfigurationSchema: schema.define.ZodObject<{
    scopes: schema.define.ZodDefault<schema.define.ZodString>;
}, "strip", schema.define.ZodTypeAny, {
    scopes: string;
}, {
    scopes?: string | undefined;
}>;
export declare type AppConfiguration = schema.define.infer<typeof AppConfigurationSchema>;
declare const UIExtensionConfigurationSchema: schema.define.ZodObject<{
    name: schema.define.ZodString;
    type: schema.define.ZodEnum<["product_subscription", "checkout_ui_extension", "checkout_post_purchase", "web_pixel_extension", "pos_ui_extension"]>;
    metafields: schema.define.ZodDefault<schema.define.ZodArray<schema.define.ZodObject<{
        namespace: schema.define.ZodString;
        key: schema.define.ZodString;
    }, "strip", schema.define.ZodTypeAny, {
        namespace: string;
        key: string;
    }, {
        namespace: string;
        key: string;
    }>, "many">>;
    extensionPoints: schema.define.ZodOptional<schema.define.ZodArray<schema.define.ZodString, "many">>;
    capabilities: schema.define.ZodOptional<schema.define.ZodAny>;
    runtimeContext: schema.define.ZodOptional<schema.define.ZodString>;
    version: schema.define.ZodOptional<schema.define.ZodString>;
    configuration: schema.define.ZodOptional<schema.define.ZodAny>;
}, "strip", schema.define.ZodTypeAny, {
    version?: string | undefined;
    extensionPoints?: string[] | undefined;
    capabilities?: any;
    runtimeContext?: string | undefined;
    configuration?: any;
    name: string;
    type: "product_subscription" | "checkout_ui_extension" | "checkout_post_purchase" | "web_pixel_extension" | "pos_ui_extension";
    metafields: {
        namespace: string;
        key: string;
    }[];
}, {
    version?: string | undefined;
    metafields?: {
        namespace: string;
        key: string;
    }[] | undefined;
    extensionPoints?: string[] | undefined;
    capabilities?: any;
    runtimeContext?: string | undefined;
    configuration?: any;
    name: string;
    type: "product_subscription" | "checkout_ui_extension" | "checkout_post_purchase" | "web_pixel_extension" | "pos_ui_extension";
}>;
declare type UIExtensionConfiguration = schema.define.infer<typeof UIExtensionConfigurationSchema>;
declare const FunctionExtensionConfigurationSchema: schema.define.ZodObject<{
    name: schema.define.ZodString;
    type: schema.define.ZodEnum<["product_discounts", "order_discounts", "shipping_discounts", "payment_methods", "shipping_rate_presenter"]>;
    description: schema.define.ZodDefault<schema.define.ZodString>;
    build: schema.define.ZodObject<{
        command: schema.define.ZodString;
        path: schema.define.ZodOptional<schema.define.ZodString>;
    }, "strip", schema.define.ZodTypeAny, {
        path?: string | undefined;
        command: string;
    }, {
        path?: string | undefined;
        command: string;
    }>;
    configurationUi: schema.define.ZodDefault<schema.define.ZodOptional<schema.define.ZodBoolean>>;
    ui: schema.define.ZodOptional<schema.define.ZodObject<{
        paths: schema.define.ZodOptional<schema.define.ZodObject<{
            create: schema.define.ZodString;
            details: schema.define.ZodString;
        }, "strip", schema.define.ZodTypeAny, {
            create: string;
            details: string;
        }, {
            create: string;
            details: string;
        }>>;
    }, "strip", schema.define.ZodTypeAny, {
        paths?: {
            create: string;
            details: string;
        } | undefined;
    }, {
        paths?: {
            create: string;
            details: string;
        } | undefined;
    }>>;
    apiVersion: schema.define.ZodString;
}, "strip", schema.define.ZodTypeAny, {
    ui?: {
        paths?: {
            create: string;
            details: string;
        } | undefined;
    } | undefined;
    name: string;
    description: string;
    type: "product_discounts" | "order_discounts" | "shipping_discounts" | "payment_methods" | "shipping_rate_presenter";
    build: {
        path?: string | undefined;
        command: string;
    };
    configurationUi: boolean;
    apiVersion: string;
}, {
    ui?: {
        paths?: {
            create: string;
            details: string;
        } | undefined;
    } | undefined;
    description?: string | undefined;
    configurationUi?: boolean | undefined;
    name: string;
    type: "product_discounts" | "order_discounts" | "shipping_discounts" | "payment_methods" | "shipping_rate_presenter";
    build: {
        path?: string | undefined;
        command: string;
    };
    apiVersion: string;
}>;
declare type FunctionExtensionConfiguration = schema.define.infer<typeof FunctionExtensionConfigurationSchema>;
declare const ThemeExtensionConfigurationSchema: schema.define.ZodObject<{
    name: schema.define.ZodString;
    type: schema.define.ZodEnum<["theme"]>;
}, "strip", schema.define.ZodTypeAny, {
    name: string;
    type: "theme";
}, {
    name: string;
    type: "theme";
}>;
declare type ThemeExtensionConfiguration = schema.define.infer<typeof ThemeExtensionConfigurationSchema>;
export interface Extension {
    idEnvironmentVariableName: string;
    localIdentifier: string;
    configurationPath: string;
    directory: string;
    type: ExtensionTypes;
    graphQLType: string;
}
declare const FunctionExtensionMetadataSchema: schema.define.ZodObject<{
    schemaVersions: schema.define.ZodObject<{}, "strip", schema.define.ZodObject<{
        major: schema.define.ZodNumber;
        minor: schema.define.ZodNumber;
    }, "strip", schema.define.ZodTypeAny, {
        major: number;
        minor: number;
    }, {
        major: number;
        minor: number;
    }>, {
        [x: string]: {
            major: number;
            minor: number;
        };
    }, {
        [x: string]: {
            major: number;
            minor: number;
        };
    }>;
}, "strip", schema.define.ZodTypeAny, {
    schemaVersions: {
        [x: string]: {
            major: number;
            minor: number;
        };
    };
}, {
    schemaVersions: {
        [x: string]: {
            major: number;
            minor: number;
        };
    };
}>;
declare type FunctionExtensionMetadata = schema.define.infer<typeof FunctionExtensionMetadataSchema>;
export declare type FunctionExtension = Extension & {
    configuration: FunctionExtensionConfiguration;
    metadata: FunctionExtensionMetadata;
    buildWasmPath: () => string;
    inputQueryPath: () => string;
};
export declare type ThemeExtension = Extension & {
    configuration: ThemeExtensionConfiguration;
};
export declare type UIExtension = Extension & {
    configuration: UIExtensionConfiguration;
    buildDirectory: string;
    entrySourceFilePath: string;
    devUUID: string;
};
export declare enum WebType {
    Frontend = "frontend",
    Backend = "backend"
}
export declare const WebConfigurationSchema: schema.define.ZodObject<{
    type: schema.define.ZodEnum<[WebType.Frontend, WebType.Backend]>;
    commands: schema.define.ZodObject<{
        build: schema.define.ZodOptional<schema.define.ZodString>;
        dev: schema.define.ZodString;
    }, "strip", schema.define.ZodTypeAny, {
        build?: string | undefined;
        dev: string;
    }, {
        build?: string | undefined;
        dev: string;
    }>;
}, "strip", schema.define.ZodTypeAny, {
    type: WebType;
    commands: {
        build?: string | undefined;
        dev: string;
    };
}, {
    type: WebType;
    commands: {
        build?: string | undefined;
        dev: string;
    };
}>;
export declare type WebConfiguration = schema.define.infer<typeof WebConfigurationSchema>;
export declare type WebConfigurationCommands = keyof WebConfiguration['commands'];
export interface Web {
    directory: string;
    configuration: WebConfiguration;
}
export interface App {
    name: string;
    idEnvironmentVariableName: string;
    directory: string;
    dependencyManager: dependency.DependencyManager;
    configuration: AppConfiguration;
    configurationPath: string;
    nodeDependencies: {
        [key: string]: string;
    };
    webs: Web[];
    dotenv?: DotEnvFile;
    extensions: {
        ui: UIExtension[];
        theme: ThemeExtension[];
        function: FunctionExtension[];
    };
    errors?: AppErrors;
}
export declare type AppLoaderMode = 'strict' | 'report';
declare class AppErrors {
    private errors;
    addError(path: string, message: output.Message): void;
    getError(path: string): output.Message;
    isEmpty(): boolean;
    toJSON(): output.Message[];
}
/**
 * Reads the dependencies from the app's package.json and creates a copy
 * of the app with the list of dependencies updated.
 * @param app {App} App whose Node dependencies will be updated.
 * @returns {Promise<App>} The app with the Node dependencies updated.
 */
export declare function updateDependencies(app: App): Promise<App>;
declare type UpdateAppIdentifiersCommand = 'dev' | 'deploy';
interface UpdateAppIdentifiersOptions {
    app: App;
    identifiers: UuidOnlyIdentifiers;
    command: UpdateAppIdentifiersCommand;
}
/**
 * Given an app and a set of identifiers, it persists the identifiers in the .env files.
 * @param options {UpdateAppIdentifiersOptions} Options.
 * @returns {App} An copy of the app with the environment updated to reflect the updated identifiers.
 */
export declare function updateAppIdentifiers({ app, identifiers, command }: UpdateAppIdentifiersOptions, systemEnvironment?: NodeJS.ProcessEnv): Promise<App>;
interface GetAppIdentifiersOptions {
    app: App;
}
/**
 * Given an app and a environment, it fetches the ids from the environment
 * and returns them.
 * @param options {GetAppIdentifiersOptions} Options.
 * @returns
 */
export declare function getAppIdentifiers({ app }: GetAppIdentifiersOptions, systemEnvironment?: NodeJS.ProcessEnv): Partial<UuidOnlyIdentifiers>;
declare type RendererVersionResult = {
    name: string;
    version: string;
} | undefined | 'not_found';
/**
 * Given a UI extension and the app it belongs to, it returns the version of the renderer package.
 * Looks for `/node_modules/@shopify/{renderer-package-name}/package.json` to find the real version used.
 * @param uiExtensionType {UIExtensionTypes} UI extension whose renderer version will be obtained.
 * @param app {App} App object containing the extension.
 * @returns {{name: string; version: string} | undefined} The version if the dependency exists.
 */
export declare function getUIExtensionRendererVersion(uiExtensionType: UIExtensionTypes, app: App): Promise<RendererVersionResult>;
export declare function load(directory: string, mode?: AppLoaderMode): Promise<App>;
export declare function hasExtensions(app: App): boolean;
/**
 * Each extension has a different ID in graphQL.
 * Sometimes the ID is the same as the type, sometimes it's different.
 * @param type {string} The extension type
 * @returns {string} The extension GraphQL ID
 */
export declare const extensionGraphqlId: (type: ExtensionTypes) => "product_discounts" | "order_discounts" | "shipping_discounts" | "payment_methods" | "shipping_rate_presenter" | "SUBSCRIPTION_MANAGEMENT" | "CHECKOUT_UI_EXTENSION" | "CHECKOUT_POST_PURCHASE" | "POS_UI_EXTENSION" | "THEME_APP_EXTENSION" | "WEB_PIXEL_EXTENSION";
export {};
