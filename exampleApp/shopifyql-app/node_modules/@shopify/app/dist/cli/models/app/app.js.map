{"version":3,"file":"app.js","sourceRoot":"","sources":["../../../../src/cli/models/app/app.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  blocks,\n  configurationFileNames,\n  functionExtensions,\n  themeExtensions,\n  uiExtensions,\n  getUIExtensionRendererDependency,\n  UIExtensionTypes,\n  dotEnvFileNames,\n  ExtensionTypes,\n} from '../../constants.js'\nimport {dependency, error, file, id, path, schema, string, toml, output} from '@shopify/cli-kit'\nimport {readAndParseDotEnv, writeDotEnv, DotEnvFile} from '@shopify/cli-kit/node/dot-env'\n\nexport interface IdentifiersExtensions {\n  [localIdentifier: string]: string\n}\n\nexport interface Identifiers {\n  /** Application's API Key */\n  app: string\n\n  /**\n   * The extensions' unique identifiers.\n   */\n  extensions: IdentifiersExtensions\n\n  /**\n   * The extensions' numeric identifiers (expressed as a string).\n   */\n  extensionIds: IdentifiersExtensions\n}\n\nexport type UuidOnlyIdentifiers = Omit<Identifiers, 'extensionIds'>\n\nexport const AppConfigurationSchema = schema.define.object({\n  scopes: schema.define.string().default(''),\n})\n\nexport type AppConfiguration = schema.define.infer<typeof AppConfigurationSchema>\n\nconst UIExtensionConfigurationSchema = schema.define.object({\n  name: schema.define.string(),\n  type: schema.define.enum(uiExtensions.types),\n  metafields: schema.define\n    .array(\n      schema.define.object({\n        namespace: schema.define.string(),\n        key: schema.define.string(),\n      }),\n    )\n    .default([]),\n  extensionPoints: schema.define.array(schema.define.string()).optional(),\n  capabilities: schema.define.any().optional(),\n\n  // Only for WebPixel\n  runtimeContext: schema.define.string().optional(),\n  version: schema.define.string().optional(),\n  configuration: schema.define.any().optional(),\n})\n\ntype UIExtensionConfiguration = schema.define.infer<typeof UIExtensionConfigurationSchema>\n\nconst FunctionExtensionConfigurationSchema = schema.define.object({\n  name: schema.define.string(),\n  type: schema.define.enum(functionExtensions.types),\n  description: schema.define.string().default(''),\n  build: schema.define.object({\n    command: schema.define.string(),\n    path: schema.define.string().optional(),\n  }),\n  configurationUi: schema.define.boolean().optional().default(true),\n  ui: schema.define\n    .object({\n      paths: schema.define\n        .object({\n          create: schema.define.string(),\n          details: schema.define.string(),\n        })\n        .optional(),\n    })\n    .optional(),\n  apiVersion: schema.define.string(),\n})\n\ntype FunctionExtensionConfiguration = schema.define.infer<typeof FunctionExtensionConfigurationSchema>\n\nconst ThemeExtensionConfigurationSchema = schema.define.object({\n  name: schema.define.string(),\n  type: schema.define.enum(themeExtensions.types),\n})\n\ntype ThemeExtensionConfiguration = schema.define.infer<typeof ThemeExtensionConfigurationSchema>\n\nexport interface Extension {\n  idEnvironmentVariableName: string\n  localIdentifier: string\n  configurationPath: string\n  directory: string\n  type: ExtensionTypes\n  graphQLType: string\n}\n\nconst FunctionExtensionMetadataSchema = schema.define.object({\n  schemaVersions: schema.define.object({}).catchall(\n    schema.define.object({\n      major: schema.define.number(),\n      minor: schema.define.number(),\n    }),\n  ),\n})\n\ntype FunctionExtensionMetadata = schema.define.infer<typeof FunctionExtensionMetadataSchema>\n\nexport type FunctionExtension = Extension & {\n  configuration: FunctionExtensionConfiguration\n  metadata: FunctionExtensionMetadata\n  buildWasmPath: () => string\n  inputQueryPath: () => string\n}\n\nexport type ThemeExtension = Extension & {\n  configuration: ThemeExtensionConfiguration\n}\n\nexport type UIExtension = Extension & {\n  configuration: UIExtensionConfiguration\n  buildDirectory: string\n  entrySourceFilePath: string\n  devUUID: string\n}\n\nexport enum WebType {\n  Frontend = 'frontend',\n  Backend = 'backend',\n}\n\nexport const WebConfigurationSchema = schema.define.object({\n  type: schema.define.enum([WebType.Frontend, WebType.Backend]),\n  commands: schema.define.object({\n    build: schema.define.string().optional(),\n    dev: schema.define.string(),\n  }),\n})\n\nexport type WebConfiguration = schema.define.infer<typeof WebConfigurationSchema>\nexport type WebConfigurationCommands = keyof WebConfiguration['commands']\n\nexport interface Web {\n  directory: string\n  configuration: WebConfiguration\n}\n\nexport interface App {\n  name: string\n  idEnvironmentVariableName: string\n  directory: string\n  dependencyManager: dependency.DependencyManager\n  configuration: AppConfiguration\n  configurationPath: string\n  nodeDependencies: {[key: string]: string}\n  webs: Web[]\n  dotenv?: DotEnvFile\n  extensions: {\n    ui: UIExtension[]\n    theme: ThemeExtension[]\n    function: FunctionExtension[]\n  }\n  errors?: AppErrors\n}\n\nexport type AppLoaderMode = 'strict' | 'report'\n\ninterface AppLoaderConstructorArgs {\n  directory: string\n  mode: AppLoaderMode\n}\n\nclass AppErrors {\n  private errors: {\n    [key: string]: output.Message\n  } = {}\n\n  addError(path: string, message: output.Message): void {\n    this.errors[path] = message\n  }\n\n  getError(path: string): output.Message {\n    return this.errors[path]\n  }\n\n  isEmpty() {\n    return Object.keys(this.errors).length === 0\n  }\n\n  toJSON(): output.Message[] {\n    return Object.values(this.errors)\n  }\n}\n\nclass AppLoader {\n  private directory: string\n  private mode: AppLoaderMode\n  private appDirectory = ''\n  private configurationPath = ''\n  private errors: AppErrors = new AppErrors()\n\n  constructor({directory, mode}: AppLoaderConstructorArgs) {\n    this.mode = mode\n    this.directory = directory\n  }\n\n  async loaded() {\n    this.appDirectory = await this.findAppDirectory()\n    const configurationPath = await this.getConfigurationPath()\n    const configuration = await this.parseConfigurationFile(AppConfigurationSchema, configurationPath)\n    const extensionsPath = path.join(this.appDirectory, `${blocks.extensions.directoryName}`)\n    const dotenv = await this.loadDotEnv()\n    const functions = await this.loadFunctions(extensionsPath)\n    const uiExtensions = await this.loadUIExtensions(extensionsPath)\n    const themeExtensions = await this.loadThemeExtensions(extensionsPath)\n    const packageJSONPath = path.join(this.appDirectory, 'package.json')\n    const name = await dependency.getPackageName(packageJSONPath)\n    const nodeDependencies = await dependency.getDependencies(packageJSONPath)\n    const dependencyManager = await dependency.getDependencyManager(this.appDirectory)\n\n    const app: App = {\n      name,\n      idEnvironmentVariableName: 'SHOPIFY_API_KEY',\n      directory: this.appDirectory,\n      webs: await this.loadWebs(),\n      configuration,\n      configurationPath,\n      dotenv,\n      extensions: {ui: uiExtensions, theme: themeExtensions, function: functions},\n      dependencyManager,\n      nodeDependencies,\n    }\n    if (!this.errors.isEmpty()) app.errors = this.errors\n    return app\n  }\n\n  async loadDotEnv(): Promise<DotEnvFile | undefined> {\n    let dotEnvFile: DotEnvFile | undefined\n    const dotEnvPath = path.join(this.appDirectory, dotEnvFileNames.production)\n    if (await file.exists(dotEnvPath)) {\n      dotEnvFile = await readAndParseDotEnv(dotEnvPath)\n    }\n    return dotEnvFile\n  }\n\n  async findAppDirectory() {\n    if (!(await file.exists(this.directory))) {\n      throw new error.Abort(output.content`Couldn't find directory ${output.token.path(this.directory)}`)\n    }\n    return path.dirname(await this.getConfigurationPath())\n  }\n\n  async getConfigurationPath() {\n    if (this.configurationPath) return this.configurationPath\n\n    const configurationPath = await path.findUp(configurationFileNames.app, {\n      cwd: this.directory,\n      type: 'file',\n    })\n    if (!configurationPath) {\n      throw new error.Abort(\n        output.content`Couldn't find the configuration file for ${output.token.path(\n          this.directory,\n        )}, are you in an app directory?`,\n      )\n    }\n\n    this.configurationPath = configurationPath\n    return configurationPath\n  }\n\n  async loadWebs(): Promise<Web[]> {\n    const webTomlPaths = await path.glob(path.join(this.appDirectory, `web/**/${configurationFileNames.web}`))\n\n    const webs = await Promise.all(webTomlPaths.map((path) => this.loadWeb(path)))\n\n    return webs\n  }\n\n  async loadWeb(WebConfigurationFile: string): Promise<Web> {\n    return {\n      directory: path.dirname(WebConfigurationFile),\n      configuration: await this.parseConfigurationFile(WebConfigurationSchema, WebConfigurationFile),\n    }\n  }\n\n  async loadConfigurationFile(\n    filepath: string,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    decode: (input: any) => any = toml.decode,\n  ): Promise<unknown> {\n    if (!(await file.exists(filepath))) {\n      return this.abortOrReport(\n        output.content`Couldn't find the configuration file at ${output.token.path(filepath)}`,\n        '',\n        filepath,\n      )\n    }\n    const configurationContent = await file.read(filepath)\n    let configuration: object\n    try {\n      configuration = decode(configurationContent)\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (err: any) {\n      // TOML errors have line, pos and col properties\n      if (err.line && err.pos && err.col) {\n        return this.abortOrReport(\n          output.content`Fix the following error in ${output.token.path(filepath)}:\\n${err.message}`,\n          null,\n          filepath,\n        )\n      } else {\n        throw err\n      }\n    }\n    // Convert snake_case keys to camelCase before returning\n    return {\n      ...Object.fromEntries(Object.entries(configuration).map((kv) => [string.camelize(kv[0]), kv[1]])),\n    }\n  }\n\n  async parseConfigurationFile<TSchema extends schema.define.ZodType>(\n    schema: TSchema,\n    filepath: string,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    decode: (input: any) => any = toml.decode,\n  ): Promise<schema.define.TypeOf<TSchema>> {\n    const fallbackOutput = {} as schema.define.TypeOf<TSchema>\n\n    const configurationObject = await this.loadConfigurationFile(filepath, decode)\n    if (!configurationObject) return fallbackOutput\n\n    const parseResult = schema.safeParse(configurationObject)\n\n    if (!parseResult.success) {\n      const formattedError = JSON.stringify(parseResult.error.issues, null, 2)\n      return this.abortOrReport(\n        output.content`Fix a schema error in ${output.token.path(filepath)}:\\n${formattedError}`,\n        fallbackOutput,\n        filepath,\n      )\n    }\n    return parseResult.data\n  }\n\n  async loadUIExtensions(extensionsPath: string): Promise<UIExtension[]> {\n    const extensionConfigPaths = path.join(extensionsPath, `*/${configurationFileNames.extension.ui}`)\n    const configPaths = await path.glob(extensionConfigPaths)\n\n    const extensions = configPaths.map(async (configurationPath) => {\n      const directory = path.dirname(configurationPath)\n      const configuration = await this.parseConfigurationFile(UIExtensionConfigurationSchema, configurationPath)\n      const entrySourceFilePath = (\n        await Promise.all(\n          ['index']\n            .flatMap((name) => [`${name}.js`, `${name}.jsx`, `${name}.ts`, `${name}.tsx`])\n            .flatMap((fileName) => [`src/${fileName}`, `${fileName}`])\n            .map((relativePath) => path.join(directory, relativePath))\n            .map(async (sourcePath) => ((await file.exists(sourcePath)) ? sourcePath : undefined)),\n        )\n      ).find((sourcePath) => sourcePath !== undefined)\n      if (!entrySourceFilePath) {\n        this.abortOrReport(\n          output.content`Couldn't find an index.{js,jsx,ts,tsx} file in the directories ${output.token.path(\n            directory,\n          )} or ${output.token.path(path.join(directory, 'src'))}`,\n          undefined,\n          directory,\n        )\n      }\n\n      return {\n        idEnvironmentVariableName: `SHOPIFY_${string.constantize(path.basename(directory))}_ID`,\n        directory,\n        configuration,\n        configurationPath,\n        type: configuration.type,\n        graphQLType: extensionGraphqlId(configuration.type),\n        buildDirectory: path.join(directory, 'dist'),\n        entrySourceFilePath: entrySourceFilePath ?? '',\n        localIdentifier: path.basename(directory),\n        // The convention is that unpublished extensions will have a random UUID with prefix `dev-`\n        devUUID: `dev-${id.generateRandomUUID()}`,\n      }\n    })\n    return Promise.all(extensions)\n  }\n\n  async loadFunctions(extensionsPath: string): Promise<FunctionExtension[]> {\n    const functionConfigPaths = await path.join(extensionsPath, `*/${configurationFileNames.extension.function}`)\n    const configPaths = await path.glob(functionConfigPaths)\n\n    const functions = configPaths.map(async (configurationPath) => {\n      const directory = path.dirname(configurationPath)\n      const configuration = await this.parseConfigurationFile(FunctionExtensionConfigurationSchema, configurationPath)\n      const metadata = await this.parseConfigurationFile(\n        FunctionExtensionMetadataSchema,\n        path.join(directory, 'metadata.json'),\n        JSON.parse,\n      )\n      return {\n        directory,\n        configuration,\n        configurationPath,\n        metadata,\n        type: configuration.type,\n        graphQLType: extensionGraphqlId(configuration.type),\n        idEnvironmentVariableName: `SHOPIFY_${string.constantize(path.basename(directory))}_ID`,\n        localIdentifier: path.basename(directory),\n        buildWasmPath() {\n          return configuration.build.path\n            ? path.join(directory, configuration.build.path)\n            : path.join(directory, 'dist/index.wasm')\n        },\n        inputQueryPath() {\n          return path.join(directory, 'input.graphql')\n        },\n      }\n    })\n    return Promise.all(functions)\n  }\n\n  async loadThemeExtensions(extensionsPath: string): Promise<ThemeExtension[]> {\n    const themeConfigPaths = await path.join(extensionsPath, `*/${configurationFileNames.extension.theme}`)\n    const configPaths = await path.glob(themeConfigPaths)\n\n    const themeExtensions = configPaths.map(async (configurationPath) => {\n      const directory = path.dirname(configurationPath)\n      const configuration = await this.parseConfigurationFile(ThemeExtensionConfigurationSchema, configurationPath)\n      return {\n        directory,\n        configuration,\n        configurationPath,\n        type: configuration.type,\n        graphQLType: extensionGraphqlId(configuration.type),\n        idEnvironmentVariableName: `SHOPIFY_${string.constantize(path.basename(directory))}_ID`,\n        localIdentifier: path.basename(directory),\n      }\n    })\n    return Promise.all(themeExtensions)\n  }\n\n  abortOrReport<T>(errorMessage: output.Message, fallback: T, configurationPath: string): T {\n    if (this.mode === 'strict') {\n      throw new error.Abort(errorMessage)\n    } else {\n      this.errors.addError(configurationPath, errorMessage)\n      return fallback\n    }\n  }\n}\n\n/**\n * Reads the dependencies from the app's package.json and creates a copy\n * of the app with the list of dependencies updated.\n * @param app {App} App whose Node dependencies will be updated.\n * @returns {Promise<App>} The app with the Node dependencies updated.\n */\nexport async function updateDependencies(app: App): Promise<App> {\n  const nodeDependencies = await dependency.getDependencies(path.join(app.directory, 'package.json'))\n  return {\n    ...app,\n    nodeDependencies,\n  }\n}\n\ntype UpdateAppIdentifiersCommand = 'dev' | 'deploy'\n\ninterface UpdateAppIdentifiersOptions {\n  app: App\n  identifiers: UuidOnlyIdentifiers\n  command: UpdateAppIdentifiersCommand\n}\n\n/**\n * Given an app and a set of identifiers, it persists the identifiers in the .env files.\n * @param options {UpdateAppIdentifiersOptions} Options.\n * @returns {App} An copy of the app with the environment updated to reflect the updated identifiers.\n */\nexport async function updateAppIdentifiers(\n  {app, identifiers, command}: UpdateAppIdentifiersOptions,\n  systemEnvironment = process.env,\n): Promise<App> {\n  let dotenvFile = app.dotenv\n  if (!dotenvFile) {\n    dotenvFile = {\n      path: path.join(app.directory, dotEnvFileNames.production),\n      variables: {},\n    }\n  }\n  const updatedVariables: {[key: string]: string} = {...(app.dotenv?.variables ?? {})}\n  if (!systemEnvironment[app.idEnvironmentVariableName]) {\n    updatedVariables[app.idEnvironmentVariableName] = identifiers.app\n  }\n  Object.keys(identifiers.extensions).forEach((identifier) => {\n    const envVariable = `SHOPIFY_${string.constantize(identifier)}_ID`\n    if (!systemEnvironment[envVariable]) {\n      updatedVariables[envVariable] = identifiers.extensions[identifier]\n    }\n  })\n\n  const write = JSON.stringify(dotenvFile.variables) !== JSON.stringify(updatedVariables) && command === 'deploy'\n  dotenvFile.variables = updatedVariables\n  if (write) {\n    await writeDotEnv(dotenvFile)\n  }\n  return {\n    ...app,\n    dotenv: dotenvFile,\n  }\n}\n\ninterface GetAppIdentifiersOptions {\n  app: App\n}\n\n/**\n * Given an app and a environment, it fetches the ids from the environment\n * and returns them.\n * @param options {GetAppIdentifiersOptions} Options.\n * @returns\n */\nexport function getAppIdentifiers(\n  {app}: GetAppIdentifiersOptions,\n  systemEnvironment = process.env,\n): Partial<UuidOnlyIdentifiers> {\n  const envVariables = {\n    ...app.dotenv?.variables,\n    ...(systemEnvironment as {[variable: string]: string}),\n  }\n  const extensionsIdentifiers: {[key: string]: string} = {}\n  const processExtension = (extension: Extension) => {\n    if (Object.keys(envVariables).includes(extension.idEnvironmentVariableName)) {\n      extensionsIdentifiers[extension.localIdentifier] = envVariables[extension.idEnvironmentVariableName]\n    }\n  }\n  app.extensions.ui.forEach(processExtension)\n  app.extensions.function.forEach(processExtension)\n  app.extensions.theme.forEach(processExtension)\n\n  return {\n    app: envVariables[app.idEnvironmentVariableName],\n    extensions: extensionsIdentifiers,\n  }\n}\n\ntype RendererVersionResult = {name: string; version: string} | undefined | 'not_found'\n\n/**\n * Given a UI extension and the app it belongs to, it returns the version of the renderer package.\n * Looks for `/node_modules/@shopify/{renderer-package-name}/package.json` to find the real version used.\n * @param uiExtensionType {UIExtensionTypes} UI extension whose renderer version will be obtained.\n * @param app {App} App object containing the extension.\n * @returns {{name: string; version: string} | undefined} The version if the dependency exists.\n */\nexport async function getUIExtensionRendererVersion(\n  uiExtensionType: UIExtensionTypes,\n  app: App,\n): Promise<RendererVersionResult> {\n  // Look for the vanilla JS version of the dependency (the react one depends on it, will always be present)\n  const fullName = getUIExtensionRendererDependency(uiExtensionType)?.name.replace('-react', '')\n  if (!fullName) return undefined\n  // Split the dependency name to avoid using \"/\" in windows\n  const dependencyName = fullName.split('/')\n\n  // Find the package.json in the project structure\n  const realPath = path.join('node_modules', dependencyName[0], dependencyName[1], 'package.json')\n  const packagePath = await path.findUp(realPath, {type: 'file', cwd: app.directory})\n  if (!packagePath) return 'not_found'\n\n  // Load the package.json and extract the version\n  const packageContent = await dependency.packageJSONContents(packagePath)\n  if (!packageContent.version) return 'not_found'\n  return {name: fullName, version: packageContent.version}\n}\n\nexport async function load(directory: string, mode: AppLoaderMode = 'strict'): Promise<App> {\n  const loader = new AppLoader({directory, mode})\n  return loader.loaded()\n}\n\nexport function hasExtensions(app: App): boolean {\n  return app.extensions.ui.length !== 0 || app.extensions.function.length !== 0 || app.extensions.theme.length !== 0\n}\n\n/**\n * Each extension has a different ID in graphQL.\n * Sometimes the ID is the same as the type, sometimes it's different.\n * @param type {string} The extension type\n * @returns {string} The extension GraphQL ID\n */\nexport const extensionGraphqlId = (type: ExtensionTypes) => {\n  switch (type) {\n    case 'product_subscription':\n      return 'SUBSCRIPTION_MANAGEMENT'\n    case 'checkout_ui_extension':\n      return 'CHECKOUT_UI_EXTENSION'\n    case 'checkout_post_purchase':\n      return 'CHECKOUT_POST_PURCHASE'\n    case 'pos_ui_extension':\n      return 'POS_UI_EXTENSION'\n    case 'theme':\n      return 'THEME_APP_EXTENSION'\n    case 'web_pixel_extension':\n      return 'WEB_PIXEL_EXTENSION'\n    case 'product_discounts':\n    case 'order_discounts':\n    case 'shipping_discounts':\n    case 'payment_methods':\n    case 'shipping_rate_presenter':\n      // As we add new extensions, this bug will force us to add a new case here.\n      return type\n  }\n}\n"]}