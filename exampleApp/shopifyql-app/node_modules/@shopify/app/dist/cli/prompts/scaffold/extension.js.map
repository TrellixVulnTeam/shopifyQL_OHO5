{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../src/cli/prompts/scaffold/extension.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  extensions,\n  ExtensionTypes,\n  functionExtensions,\n  getExtensionOutputConfig,\n  themeExtensions,\n  uiExtensions,\n  isUiExtensionType,\n  isFunctionExtensionType,\n  functionExtensionTemplates,\n} from '../../constants.js'\nimport {getUIExtensionTemplates, isValidUIExtensionTemplate} from '../../utilities/extensions/template-configuration.js'\nimport {haiku, ui, environment} from '@shopify/cli-kit'\n\ninterface ScaffoldExtensionOptions {\n  name?: string\n  extensionType?: string\n  extensionTypesAlreadyAtQuota: string[]\n  extensionFlavor?: string\n}\n\ninterface ScaffoldExtensionOutput {\n  name: string\n  extensionType: ExtensionTypes\n  extensionFlavor?: string\n}\n\nexport const extensionFlavorQuestion = (extensionType: string): ui.Question => {\n  let choices: {name: string; value: string}[] = []\n  if (isUiExtensionType(extensionType)) {\n    choices = choices.concat(getUIExtensionTemplates(extensionType))\n  }\n  if (isFunctionExtensionType(extensionType)) {\n    choices = choices.concat(functionExtensionTemplates)\n  }\n  return {\n    type: 'select',\n    name: 'extensionFlavor',\n    message: 'Choose a starting template for your extension',\n    choices,\n    default: 'react',\n  }\n}\n\nconst scaffoldExtensionPrompt = async (\n  options: ScaffoldExtensionOptions,\n  prompt = ui.prompt,\n): Promise<ScaffoldExtensionOutput> => {\n  const questions: ui.Question<'name' | 'extensionType'>[] = []\n  const isShopify = await environment.local.isShopify()\n  const supportedExtensions = isShopify ? extensions.types : extensions.publicTypes\n  if (!options.extensionType) {\n    let relevantExtensionTypes = supportedExtensions.filter(\n      (type) => !options.extensionTypesAlreadyAtQuota.includes(type),\n    )\n    if (options.extensionFlavor) {\n      relevantExtensionTypes = relevantExtensionTypes.filter((relevantExtensionType) =>\n        isValidUIExtensionTemplate(relevantExtensionType, options.extensionFlavor),\n      )\n    }\n    questions.push({\n      type: 'select',\n      name: 'extensionType',\n      message: 'Type of extension?',\n      choices: relevantExtensionTypes\n        .map((type) => ({\n          name: getExtensionOutputConfig(type).humanKey,\n          value: type,\n        }))\n        .sort(extensionTypeChoiceSorterByGroupAndName),\n    })\n  }\n  if (!options.name) {\n    questions.push({\n      type: 'input',\n      name: 'name',\n      message: \"Your extension's working name?\",\n      default: haiku.generate('ext'),\n    })\n  }\n  let promptOutput: ScaffoldExtensionOutput = await prompt(questions)\n  const extensionType = {...options, ...promptOutput}.extensionType\n  if (!options.extensionFlavor && (isUiExtensionType(extensionType) || isFunctionExtensionType(extensionType))) {\n    promptOutput = {\n      ...promptOutput,\n      extensionFlavor: (\n        (await prompt([\n          extensionFlavorQuestion(extensionType),\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ])) as any\n      ).extensionFlavor,\n    }\n  }\n  return {...options, ...promptOutput}\n}\n\n/**\n * Sorting method for prompt choices that sort alphabetically extensions showing first the UI ones\n * and latest the function ones\n */\nexport const extensionTypeChoiceSorterByGroupAndName = (\n  c1: {name: string; value: string},\n  c2: {name: string; value: string},\n) => {\n  const c1ExtensiontyCategoryPosition = extensiontypeCategoryPosition(c1.value)\n  const c2ExtensiontyCategoryPosition = extensiontypeCategoryPosition(c2.value)\n\n  if (c1ExtensiontyCategoryPosition === c2ExtensiontyCategoryPosition) {\n    return c1.name.localeCompare(c2.name)\n  } else {\n    return c1ExtensiontyCategoryPosition < c2ExtensiontyCategoryPosition ? -1 : 1\n  }\n}\n\n/**\n * It maps an extension category to a numeric value.\n * @param extensionType {string} The extension type which will be resolved to its category.\n * @returns The numeric value of the extension category.\n */\nconst extensiontypeCategoryPosition = (extensionType: string): number => {\n  if (includes(uiExtensions.types, extensionType) || includes(themeExtensions.types, extensionType)) {\n    return 0\n  } else if (includes(functionExtensions.types, extensionType)) {\n    return 1\n  } else {\n    return Number.MAX_VALUE\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction includes<T extends U, U>(coll: ReadonlyArray<T>, el: U): el is T {\n  return coll.includes(el as T)\n}\n\nexport default scaffoldExtensionPrompt\n"]}