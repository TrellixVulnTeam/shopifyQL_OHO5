{"version":3,"file":"environment.js","sourceRoot":"","sources":["../../../src/cli/services/environment.ts"],"names":[],"mappings":"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","sourcesContent":["import {selectOrCreateApp} from './dev/select-app.js'\nimport {\n  fetchAllStores,\n  fetchAppFromApiKey,\n  fetchOrgAndApps,\n  fetchOrganizations,\n  fetchOrgFromId,\n  FetchResponse,\n} from './dev/fetch.js'\nimport {selectStore, convertToTestStoreIfNeeded} from './dev/select-store.js'\nimport {ensureDeploymentIdsPresence} from './environment/identifiers.js'\nimport {reuseDevConfigPrompt, selectOrganizationPrompt} from '../prompts/dev.js'\nimport {App, Identifiers, UuidOnlyIdentifiers, updateAppIdentifiers, getAppIdentifiers} from '../models/app/app.js'\nimport {Organization, OrganizationApp, OrganizationStore} from '../models/organization.js'\nimport {error as kitError, output, session, store, ui, environment, dependency} from '@shopify/cli-kit'\n\nexport const InvalidApiKeyError = (apiKey: string) => {\n  return new kitError.Abort(\n    output.content`Invalid API key: ${apiKey}`,\n    output.content`You can find the API key in the app settings in the Partner Dashboard.`,\n  )\n}\n\nexport const DeployAppNotFound = (apiKey: string, dependencyManager: dependency.DependencyManager) => {\n  return new kitError.Abort(\n    output.content`Couldn't find the app with API key ${apiKey}`,\n    output.content`â€¢ If you didn't intend to select this app, run ${\n      output.content`${output.token.packagejsonScript(dependencyManager, 'deploy', '--reset')}`.value\n    }`,\n  )\n}\n\nexport const AppOrganizationNotFoundError = (apiKey: string, organizations: string[]) => {\n  return new kitError.Abort(\n    `The application with API Key ${apiKey} doesn't belong to any of your organizations: ${organizations.join(', ')}`,\n  )\n}\n\nexport interface DevEnvironmentOptions {\n  app: App\n  apiKey?: string\n  storeFqdn?: string\n  reset: boolean\n}\n\ninterface DevEnvironmentOutput {\n  app: Omit<OrganizationApp, 'apiSecretKeys' | 'apiKey'> & {apiSecret?: string}\n  storeFqdn: string\n  identifiers: UuidOnlyIdentifiers\n}\n\n/**\n * Make sure there is a valid environment to execute `dev`\n * That means we have a valid organization, app and dev store selected.\n *\n * If there are app/store from flags, we check if they are valid. If they are not, throw an error.\n * If there is cached info (user ran `dev` previously), check if it is still valid and return it.\n * If there is no cached info (or is invalid):\n *  - Show prompts to select an org, app and dev store\n *  - The new selection will be saved as global configuration\n *  - The `shopify.app.toml` file will be updated with the new app apiKey\n *\n * @param options {DevEnvironmentInput} Current dev environment options\n * @returns {Promise<DevEnvironmentOutput>} The selected org, app and dev store\n */\nexport async function ensureDevEnvironment(\n  options: DevEnvironmentOptions,\n  token: string,\n): Promise<DevEnvironmentOutput> {\n  // We retrieve the production identifiers to know if the user has selected the prod app for `dev`\n  const prodEnvIdentifiers = await getAppIdentifiers({app: options.app})\n  const envExtensionsIds = prodEnvIdentifiers.extensions || {}\n\n  const cachedInfo = getAppDevCachedInfo({\n    reset: options.reset,\n    directory: options.app.directory,\n    apiKey: options.apiKey ?? store.cliKitStore().getAppInfo(options.app.directory)?.appId,\n  })\n\n  const explanation =\n    `\\nLooks like this is the first time you're running dev for this project.\\n` +\n    'Configure your preferences by answering a few questions.\\n'\n\n  if (cachedInfo === undefined && !options.reset) {\n    output.info(explanation)\n  }\n\n  const orgId = cachedInfo?.orgId || (await selectOrg(token))\n  const {organization, apps, stores} = await fetchOrgsAppsAndStores(orgId, token)\n\n  let {app: selectedApp, store: selectedStore} = await fetchDevDataFromOptions(options, organization, stores, token)\n  if (selectedApp && selectedStore) {\n    // eslint-disable-next-line no-param-reassign\n    options = await updateDevOptions({...options, apiKey: selectedApp.apiKey})\n\n    store\n      .cliKitStore()\n      .setAppInfo({appId: selectedApp.apiKey, directory: options.app.directory, storeFqdn: selectedStore, orgId})\n\n    // If the selected app is the \"prod\" one, we will use the real extension IDs for `dev`\n    const extensions = prodEnvIdentifiers.app === selectedApp.apiKey ? envExtensionsIds : {}\n    return {\n      app: {\n        ...selectedApp,\n        apiSecret: selectedApp.apiSecretKeys.length === 0 ? undefined : selectedApp.apiSecretKeys[0].secret,\n      },\n      storeFqdn: selectedStore,\n      identifiers: {\n        app: selectedApp.apiKey,\n        extensions,\n      },\n    }\n  }\n\n  selectedApp = selectedApp || (await selectOrCreateApp(options.app, apps, organization, token, cachedInfo?.appId))\n  store\n    .cliKitStore()\n    .setAppInfo({appId: selectedApp.apiKey, title: selectedApp.title, directory: options.app.directory, orgId})\n\n  // eslint-disable-next-line no-param-reassign\n  options = await updateDevOptions({...options, apiKey: selectedApp.apiKey})\n  selectedStore = selectedStore || (await selectStore(stores, organization, token, cachedInfo?.storeFqdn))\n  store\n    .cliKitStore()\n    .setAppInfo({appId: selectedApp.apiKey, directory: options.app.directory, storeFqdn: selectedStore})\n\n  if (selectedApp.apiKey === cachedInfo?.appId && selectedStore === cachedInfo.storeFqdn) {\n    showReusedValues(organization.businessName, options.app, selectedStore)\n  }\n\n  // If the selected app is the \"prod\" one, we will use the real extension IDs for `dev`\n  const extensions = prodEnvIdentifiers.app === selectedApp.apiKey ? envExtensionsIds : {}\n  return {\n    app: {\n      ...selectedApp,\n      apiSecret: selectedApp.apiSecretKeys.length === 0 ? undefined : selectedApp.apiSecretKeys[0].secret,\n    },\n    storeFqdn: selectedStore,\n    identifiers: {\n      app: selectedApp.apiKey,\n      extensions,\n    },\n  }\n}\n\nasync function updateDevOptions(options: DevEnvironmentOptions & {apiKey: string}) {\n  const updatedApp = await updateAppIdentifiers({\n    app: options.app,\n    identifiers: {\n      app: options.apiKey,\n      extensions: {},\n    },\n    command: 'dev',\n  })\n  return {\n    ...options,\n    app: updatedApp,\n  }\n}\n\nexport interface DeployEnvironmentOptions {\n  app: App\n  reset: boolean\n}\n\ninterface DeployEnvironmentOutput {\n  app: App\n  token: string\n  partnersOrganizationId: string\n  partnersApp: Omit<OrganizationApp, 'apiSecretKeys' | 'apiKey'>\n  identifiers: Identifiers\n}\n\n/**\n * If there is a cached ApiKey used for dev, retrieve that and ask the user if they want to reuse it\n * @param app {App} The local app object\n * @param token {string} The token to use to access the Partners API\n * @returns {Promise<OrganizationApp | undefined>}\n * OrganizationApp if a cached value is valid.\n * undefined if there is no cached value or the user doesn't want to use it.\n */\nasync function fetchDevAppAndPrompt(app: App, token: string): Promise<OrganizationApp | undefined> {\n  const devAppId = store.cliKitStore().getAppInfo(app.directory)?.appId\n  if (!devAppId) return undefined\n\n  const partnersResponse = await fetchAppFromApiKey(devAppId, token)\n  if (!partnersResponse) return undefined\n\n  const org: Organization | undefined = await fetchOrgFromId(partnersResponse.organizationId, token)\n\n  showDevValues(org?.businessName ?? 'unknown', partnersResponse.title)\n  const reuse = await reuseDevConfigPrompt()\n  return reuse ? partnersResponse : undefined\n}\n\nexport async function ensureDeployEnvironment(options: DeployEnvironmentOptions): Promise<DeployEnvironmentOutput> {\n  const token = await session.ensureAuthenticatedPartners()\n  let envIdentifiers = await getAppIdentifiers({app: options.app})\n\n  let partnersApp: OrganizationApp | undefined\n\n  if (options.reset) {\n    envIdentifiers = {app: undefined, extensions: {}}\n  } else if (envIdentifiers.app) {\n    partnersApp = await fetchAppFromApiKey(envIdentifiers.app, token)\n    if (!partnersApp) throw DeployAppNotFound(envIdentifiers.app, options.app.dependencyManager)\n  } else {\n    partnersApp = await fetchDevAppAndPrompt(options.app, token)\n  }\n\n  let identifiers: Identifiers = envIdentifiers as Identifiers\n\n  if (!partnersApp) {\n    const result = await fetchOrganizationAndFetchOrCreateApp(options.app, token)\n    partnersApp = result.partnersApp\n  }\n\n  identifiers = await ensureDeploymentIdsPresence({\n    app: options.app,\n    appId: partnersApp.apiKey,\n    appName: partnersApp.title,\n    token,\n    envIdentifiers,\n  })\n\n  // eslint-disable-next-line no-param-reassign\n  options = {\n    ...options,\n    app: await updateAppIdentifiers({app: options.app, identifiers, command: 'deploy'}),\n  }\n  return {\n    app: options.app,\n    partnersApp: {\n      id: partnersApp.id,\n      title: partnersApp.title,\n      appType: partnersApp.appType,\n      organizationId: partnersApp.organizationId,\n    },\n    partnersOrganizationId: partnersApp.organizationId,\n    identifiers,\n    token,\n  }\n}\n\nexport async function fetchOrganizationAndFetchOrCreateApp(\n  app: App,\n  token: string,\n): Promise<{partnersApp: OrganizationApp; orgId: string}> {\n  const orgId = await selectOrg(token)\n  const {organization, apps} = await fetchOrgsAppsAndStores(orgId, token)\n  const partnersApp = await selectOrCreateApp(app, apps, organization, token, undefined)\n  return {orgId, partnersApp}\n}\n\nasync function fetchOrgsAppsAndStores(orgId: string, token: string): Promise<FetchResponse> {\n  let data = {} as FetchResponse\n  const list = ui.newListr(\n    [\n      {\n        title: 'Fetching organization data',\n        task: async () => {\n          const organizationAndApps = await fetchOrgAndApps(orgId, token)\n          const stores = await fetchAllStores(orgId, token)\n          data = {...organizationAndApps, stores} as FetchResponse\n          // We need ALL stores so we can validate the selected one.\n          // This is a temporary workaround until we have an endpoint to fetch only 1 store to validate.\n        },\n      },\n    ],\n    {rendererSilent: environment.local.isUnitTest()},\n  )\n  await list.run()\n  return data\n}\n\n/**\n * Any data sent via input flags takes precedence and needs to be validated.\n * If any of the inputs is invalid, we must throw an error and stop the execution.\n * @param input\n * @returns\n */\nasync function fetchDevDataFromOptions(\n  options: DevEnvironmentOptions,\n  org: Organization,\n  stores: OrganizationStore[],\n  token: string,\n): Promise<{app?: OrganizationApp; store?: string}> {\n  let selectedApp: OrganizationApp | undefined\n  let selectedStore: string | undefined\n\n  if (options.apiKey) {\n    selectedApp = await fetchAppFromApiKey(options.apiKey, token)\n    if (!selectedApp) throw InvalidApiKeyError(options.apiKey)\n  }\n\n  if (options.storeFqdn) {\n    await convertToTestStoreIfNeeded(options.storeFqdn, stores, org, token)\n    selectedStore = options.storeFqdn\n  }\n\n  return {app: selectedApp, store: selectedStore}\n}\n\n/**\n * Retrieve cached info from the global configuration based on the current local app\n * @param reset {boolean} Wheter to reset the cache or not\n * @param directory {string} The directory containing the app.\n * @param appId {string} Current local app id, used to retrieve the cached info\n * @returns\n */\nfunction getAppDevCachedInfo({\n  reset,\n  directory,\n  apiKey,\n}: {\n  reset: boolean\n  directory: string\n  apiKey?: string\n}): store.CachedAppInfo | undefined {\n  if (!apiKey) return undefined\n  if (apiKey && reset) store.cliKitStore().clearAppInfo(directory)\n  return store.cliKitStore().getAppInfo(directory)\n}\n\n/**\n * Fetch all orgs the user belongs to and show a prompt to select one of them\n * @param token {string} Token to access partners API\n * @returns {Promise<string>} The selected organization ID\n */\nasync function selectOrg(token: string): Promise<string> {\n  const orgs = await fetchOrganizations(token)\n  const org = await selectOrganizationPrompt(orgs)\n  return org.id\n}\n\n/**\n * Message shown to the user in case we are reusing a previous configuration\n * @param org {string} Organization name\n * @param app {string} App name\n * @param store {string} Store domain\n */\nfunction showReusedValues(org: string, app: App, store: string) {\n  output.info('\\nUsing your previous dev settings:')\n  output.info(`Org:        ${org}`)\n  output.info(`App:        ${app.name}`)\n  output.info(`Dev store:  ${store}\\n`)\n  output.info(\n    output.content`To reset your default dev config, run ${output.token.packagejsonScript(\n      app.dependencyManager,\n      'dev',\n      '--reset',\n    )}\\n`,\n  )\n}\n\n/**\n * Message shown to the user in case we are reusing a previous configuration\n * @param org {string} Organization name\n * @param app {string} App name\n * @param store {string} Store domain\n */\nfunction showDevValues(org: string, appName: string) {\n  output.info('\\nYour configs for dev were:')\n  output.info(`Org:        ${org}`)\n  output.info(`App:        ${appName}\\n`)\n}\n"]}