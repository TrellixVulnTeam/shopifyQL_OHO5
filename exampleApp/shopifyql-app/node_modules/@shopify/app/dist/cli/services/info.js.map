{"version":3,"file":"info.js","sourceRoot":"","sources":["../../../src/cli/services/info.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,eAAe,EAAE,kBAAkB,EAAC,MAAM,gBAAgB,CAAA;AAClE,OAAO,EAAC,iBAAiB,EAAC,MAAM,qBAAqB,CAAA;AAErD,OAAO,EAAC,sBAAsB,EAAE,kBAAkB,EAAE,eAAe,EAAE,YAAY,EAAC,MAAM,iBAAiB,CAAA;AACzG,OAAO,EAAC,wBAAwB,EAAC,MAAM,mBAAmB,CAAA;AAC1D,OAAO,EAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,UAAU,EAAC,MAAM,kBAAkB,CAAA;AAY7E,MAAM,CAAC,KAAK,UAAU,IAAI,CAAC,GAAQ,EAAE,EAAC,MAAM,EAAE,MAAM,EAAc;IAChE,IAAI,MAAM,EAAE;QACV,OAAO,OAAO,CAAC,GAAG,EAAE,EAAC,MAAM,EAAC,CAAC,CAAA;KAC9B;SAAM;QACL,OAAO,OAAO,CAAC,GAAG,EAAE,EAAC,MAAM,EAAC,CAAC,CAAA;KAC9B;AACH,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,OAAO,CAAC,GAAQ,EAAE,EAAC,MAAM,EAA8B;IAC3E,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,2BAA2B,EAAE,CAAA;IAEzD,MAAM,IAAI,GAAG,MAAM,kBAAkB,CAAC,KAAK,CAAC,CAAA;IAC5C,MAAM,GAAG,GAAG,MAAM,wBAAwB,CAAC,IAAI,CAAC,CAAA;IAChD,MAAM,EAAC,YAAY,EAAE,IAAI,EAAC,GAAG,MAAM,eAAe,CAAC,GAAG,CAAC,EAAE,EAAE,KAAK,CAAC,CAAA;IAEjE,MAAM,WAAW,GAAG,MAAM,iBAAiB,CAAC,GAAG,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,CAAC,CAAA;IAE3E,IAAI,MAAM,KAAK,MAAM,EAAE;QACrB,OAAO,MAAM,CAAC,OAAO,CAAA,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC;YACxC,eAAe,EAAE,WAAW,CAAC,MAAM;YACnC,kBAAkB,EAAE,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM;YACvD,MAAM,EAAE,GAAG,CAAC,aAAa,CAAC,MAAM;SACjC,CAAC,EAAE,CAAA;KACL;SAAM;QACL,OAAO,MAAM,CAAC,OAAO,CAAA;;MAEnB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,WAAW,CAAC,MAAM;MAC5D,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,oBAAoB,CAAC,KAAK,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM;MAChF,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM;KAC1D,CAAA;KACF;AACH,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,OAAO,CAAC,GAAQ,EAAE,EAAC,MAAM,EAA8B;IAC3E,IAAI,MAAM,KAAK,MAAM,EAAE;QACrB,OAAO,MAAM,CAAC,OAAO,CAAA,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAA;KACvD;SAAM;QACL,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,CAAA;QAChC,OAAO,OAAO,CAAC,MAAM,EAAE,CAAA;KACxB;AACH,CAAC;AAED,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAA,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAA;AAC5E,MAAM,mBAAmB,GAAG,MAAM,CAAC,OAAO,CAAA,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,oBAAoB,CAAC,EAAE,CAAC,KAAK,CAAA;AAE9F,MAAM,OAAO;IAIX,YAAY,GAAQ;QAClB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;QACd,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;IACpE,CAAC;IAED,KAAK,CAAC,MAAM;QACV,MAAM,QAAQ,GAAuB;YACnC,IAAI,CAAC,iBAAiB,EAAE;YACxB,IAAI,CAAC,sBAAsB,EAAE;YAC7B,IAAI,CAAC,oBAAoB,EAAE;YAC3B,IAAI,CAAC,mBAAmB,EAAE;YAC1B,MAAM,IAAI,CAAC,iBAAiB,EAAE;SAC/B,CAAA;QACD,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,eAAiC,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IAC3G,CAAC;IAED,iBAAiB;QACf,MAAM,KAAK,GAAG,iBAAiB,CAAA;QAE/B,IAAI,OAAO,GAAG,mBAAmB,CAAA;QACjC,IAAI,gBAAgB,GAAG,mBAAmB,CAAA;QAC1C,IAAI,MAAM,GAAG,mBAAmB,CAAA;QAChC,IAAI,UAAU,GAAG,MAAM,CAAC,OAAO,CAAA,2CAA2C,MAAM,CAAC,KAAK,CAAC,iBAAiB,CACtG,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAC1B,KAAK,CACN,EAAE,CAAC,KAAK,CAAA;QACT,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK;gBAAE,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAA;YAChE,IAAI,IAAI,CAAC,aAAa,CAAC,SAAS;gBAAE,gBAAgB,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAA;YACjF,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK;gBAAE,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAA;YAC/D,UAAU,GAAG,MAAM,CAAC,OAAO,CAAA,2BAA2B,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAClF,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAC1B,KAAK,EACL,SAAS,CACV,EAAE,CAAC,KAAK,CAAA;SACV;QACD,MAAM,KAAK,GAAG;YACZ,CAAC,KAAK,EAAE,OAAO,CAAC;YAChB,CAAC,WAAW,EAAE,gBAAgB,CAAC;YAC/B,CAAC,SAAS,EAAE,MAAM,CAAC;SACpB,CAAA;QACD,OAAO,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,OAAO,UAAU,EAAE,CAAC,CAAA;IAClE,CAAC;IAED,sBAAsB;QACpB,MAAM,KAAK,GAAG,cAAc,CAAA;QAC5B,MAAM,KAAK,GAAG;YACZ,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;YACvB,CAAC,eAAe,EAAE,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC;SACtC,CAAA;QACD,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAA;IAC5C,CAAC;IAED,oBAAoB;QAClB,MAAM,KAAK,GAAG,sBAAsB,CAAA;QAEpC,IAAI,IAAI,GAAG,KAAK,IAAI,CAAC,oBAAoB,EAAE,EAAE,CAAA;QAE7C,SAAS,qBAAqB,CAC5B,cAAqC,EACrC,UAAwB,EACxB,eAAkD;YAElD,cAAc,CAAC,OAAO,CAAC,CAAC,aAAqB,EAAE,EAAE;gBAC/C,MAAM,kBAAkB,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,SAAqB,EAAE,EAAE;oBACrE,MAAM,iBAAiB,GAAG,SAAS,CAAC,aAAa,IAAI,SAAS,CAAC,aAAa,CAAC,IAAI,CAAA;oBACjF,OAAO,iBAAiB,KAAK,aAAa,CAAA;gBAC5C,CAAC,CAAC,CAAA;gBACF,IAAI,kBAAkB,CAAC,CAAC,CAAC,EAAE;oBACzB,IAAI,IAAI,OAAO,MAAM,CAAC,OAAO,CAAA,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE,CAAC,KAAK,EAAE,CAAA;oBAChF,kBAAkB,CAAC,OAAO,CAAC,CAAC,SAAqB,EAAE,EAAE;wBACnD,IAAI,IAAI,GAAG,eAAe,CAAC,SAAS,CAAC,EAAE,CAAA;oBACzC,CAAC,CAAC,CAAA;iBACH;YACH,CAAC,CAAC,CAAA;QACJ,CAAC;QACD,qBAAqB,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,EAAE,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;QACxG,qBAAqB,CAAC,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;QACjH,qBAAqB,CACnB,kBAAkB,CAAC,KAAK,EACxB,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,EAC5B,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,IAAI,CAAC,CAC5C,CAAA;QAED,MAAM,iBAAiB,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC;aACzD,IAAI,EAAE;aACN,MAAM,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,aAAa,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;QACnF,IAAI,iBAAiB,CAAC,CAAC,CAAC,EAAE;YACxB,IAAI,IAAI,OAAO,MAAM,CAAC,OAAO,CAAA,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,wBAAwB,CAAC,EAAE,CAAC,KAAK,EAAE,CAAA;YAC3F,iBAAiB,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;gBACtC,IAAI,IAAI,GAAG,IAAI,CAAC,0BAA0B,CAAC,SAAS,CAAC,EAAE,CAAA;YACzD,CAAC,CAAC,CAAA;SACH;QAED,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;IACtB,CAAC;IAED,oBAAoB;QAClB,MAAM,MAAM,GAAqB,EAAE,CAAA;QACnC,MAAM,QAAQ,GAAG,CAAC,MAAM,CAAC,OAAO,CAAA,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAA;QAC1E,MAAM,QAAQ,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAA;QAC/B,MAAM,SAAS,GAAuB,EAAE,CAAA;QACxC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YAC5B,IAAI,GAAG,CAAC,aAAa,IAAI,GAAG,CAAC,aAAa,CAAC,IAAI,EAAE;gBAC/C,SAAS,CAAC,IAAI,CAAC,CAAC,QAAQ,GAAG,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;aACrG;iBAAM,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;gBAC1B,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC,SAAS,IAAI,sBAAsB,CAAC,GAAG,EAAE,CAAC,CAAA;gBACxF,IAAI,KAAK,EAAE;oBACT,SAAS,CAAC,IAAI,CAAC,CAAC,QAAQ,YAAY,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;oBAC1F,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;iBACnB;aACF;QACH,CAAC,CAAC,CAAA;QACF,IAAI,YAAY,GAAG,KAAK,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAA;QACpE,IAAI,YAAY,CAAC,IAAI,EAAE,KAAK,EAAE;YAAE,YAAY,GAAG,EAAE,CAAA;QAEjD,OAAO,GAAG,QAAQ,KAAK,IAAI,CAAC,cAAc,CAAC,CAAC,QAAQ,EAAE,GAAG,SAAS,CAAC,CAAC,GAAG,YAAY,EAAE,CAAA;IACvF,CAAC;IAED,qBAAqB,CAAC,SAAsB;QAC1C,MAAM,MAAM,GAAG,SAAS,CAAC,aAAa,CAAA;QACtC,MAAM,OAAO,GAAG;YACd,CAAC,MAAM,MAAM,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC;YAC7E,CAAC,kBAAkB,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,iBAAiB,CAAC,CAAC;SACtF,CAAA;QACD,IAAI,MAAM,IAAI,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE;YACtC,OAAO,CAAC,IAAI,CAAC,CAAC,iBAAiB,EAAE,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;SACjE;QAED,OAAO,KAAK,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,CAAA;IAC5C,CAAC;IAED,2BAA2B,CAAC,SAA4B;QACtD,MAAM,MAAM,GAAG,SAAS,CAAC,aAAa,CAAA;QACtC,MAAM,OAAO,GAAG;YACd,CAAC,MAAM,MAAM,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC;YAC7E,CAAC,kBAAkB,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,iBAAiB,CAAC,CAAC;SACtF,CAAA;QAED,OAAO,KAAK,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,CAAA;IAC5C,CAAC;IAED,wBAAwB,CAAC,SAAyB;QAChD,MAAM,MAAM,GAAG,SAAS,CAAC,aAAa,CAAA;QACtC,MAAM,OAAO,GAAG;YACd,CAAC,MAAM,MAAM,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC;YAC7E,CAAC,kBAAkB,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,iBAAiB,CAAC,CAAC;SACtF,CAAA;QAED,OAAO,KAAK,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,CAAA;IAC5C,CAAC;IAED,0BAA0B,CAAC,SAA2D;QACpF,MAAM,OAAO,GAAG;YACd,CAAC,MAAM,YAAY,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC;YAC9E,CAAC,kBAAkB,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,iBAAiB,CAAC,CAAC;SACtF,CAAA;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,MAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAA;QACzF,OAAO,KAAK,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,KAAK,KAAK,EAAE,CAAA;IACtD,CAAC;IAED,cAAc,CAAC,GAAmB;QAChC,MAAM,CAAC,cAAc,EAAE,GAAG,mBAAmB,CAAC,GAAG,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;QACzF,MAAM,UAAU,GAAG,CAAC,KAAK,cAAc,EAAE,EAAE,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,CAAA;QAC7F,OAAO,MAAM,CAAC,OAAO,CAAA,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAA;IAC/E,CAAC;IAED,mBAAmB;QACjB,MAAM,KAAK,GAAG,iCAAiC,CAAA;QAC/C,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAA;QAC9E,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAA;IAC5C,CAAC;IAED,KAAK,CAAC,iBAAiB;QACrB,MAAM,KAAK,GAAG,oBAAoB,CAAA;QAClC,MAAM,EAAC,QAAQ,EAAE,IAAI,EAAC,GAAG,EAAE,CAAC,eAAe,EAAE,CAAA;QAC7C,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAA;QAChE,MAAM,cAAc,GAAG,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAE,qBAAqB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAA;QACzF,MAAM,KAAK,GAAe;YACxB,CAAC,aAAa,EAAE,cAAc,CAAC;YAC/B,CAAC,iBAAiB,EAAE,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC;YAC/C,CAAC,IAAI,EAAE,GAAG,QAAQ,IAAI,IAAI,EAAE,CAAC;YAC7B,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,KAAK,IAAI,SAAS,CAAC;YACzC,CAAC,cAAc,EAAE,OAAO,CAAC,OAAO,CAAC;SAClC,CAAA;QACD,OAAO,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;IACjD,CAAC;IAED,cAAc,CAAC,KAAiB;QAC9B,MAAM,MAAM,GAAa,EAAE,CAAA;QAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACxC,MAAM,UAAU,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;YAC/C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;SAC/E;QACD,MAAM,WAAW,GAAG,KAAK;aACtB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACZ,OAAO,IAAI;iBACR,GAAG,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;gBAClB,OAAO,GAAG,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,EAAE,CAAA;YAC3E,CAAC,CAAC;iBACD,IAAI,CAAC,KAAK,CAAC;iBACX,OAAO,EAAE,CAAA;QACd,CAAC,CAAC;aACD,IAAI,CAAC,IAAI,CAAC,CAAA;QACb,OAAO,WAAW,CAAA;IACpB,CAAC;IAED,OAAO,CAAC,KAAa,EAAE,IAAY;QACjC,MAAM,cAAc,GAAG,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,EAAE,CAAA;QAC/E,OAAO,MAAM,CAAC,OAAO,CAAA,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,IAAI,EAAE,CAAC,KAAK,CAAA;IAC/E,CAAC;IAED,iBAAiB;QACf,OAAO,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAA;IAClD,CAAC;IAED,KAAK,CAAC,qBAAqB;QACzB,MAAM,aAAa,GAAG,cAAc,CAAA;QACpC,MAAM,aAAa,GAAG,MAAM,UAAU,CAAC,kBAAkB,CAAC,aAAa,EAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAA;QAClG,IAAI,aAAa,EAAE;YACjB,OAAO,MAAM,CAAC,OAAO,CAAA,GAAG,UAAU,CAAC,0BAA0B,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,aAAa,CAAC,EAAE,CAAC,KAAK,CAAA;SACjH;QACD,OAAO,EAAE,CAAA;IACX,CAAC;CACF","sourcesContent":["import {fetchOrgAndApps, fetchOrganizations} from './dev/fetch.js'\nimport {selectOrCreateApp} from './dev/select-app.js'\nimport {App, FunctionExtension, ThemeExtension, UIExtension} from '../models/app/app.js'\nimport {configurationFileNames, functionExtensions, themeExtensions, uiExtensions} from '../constants.js'\nimport {selectOrganizationPrompt} from '../prompts/dev.js'\nimport {os, output, path, session, store, dependency} from '@shopify/cli-kit'\n\nexport type Format = 'json' | 'text'\ninterface InfoOptions {\n  format: Format\n  /** When true the command outputs the env. variables necessary to deploy and run web/ */\n  webEnv: boolean\n}\ninterface Configurable {\n  configuration?: {type?: string}\n}\n\nexport async function info(app: App, {format, webEnv}: InfoOptions): Promise<output.Message> {\n  if (webEnv) {\n    return infoWeb(app, {format})\n  } else {\n    return infoApp(app, {format})\n  }\n}\n\nexport async function infoWeb(app: App, {format}: Omit<InfoOptions, 'webEnv'>): Promise<output.Message> {\n  const token = await session.ensureAuthenticatedPartners()\n\n  const orgs = await fetchOrganizations(token)\n  const org = await selectOrganizationPrompt(orgs)\n  const {organization, apps} = await fetchOrgAndApps(org.id, token)\n\n  const selectedApp = await selectOrCreateApp(app, apps, organization, token)\n\n  if (format === 'json') {\n    return output.content`${output.token.json({\n      SHOPIFY_API_KEY: selectedApp.apiKey,\n      SHOPIFY_API_SECRET: selectedApp.apiSecretKeys[0].secret,\n      SCOPES: app.configuration.scopes,\n    })}`\n  } else {\n    return output.content`\nUse these environment variables to set up your deployment pipeline for this app:\n  · ${output.token.green('SHOPIFY_API_KEY')}: ${selectedApp.apiKey}\n  · ${output.token.green('SHOPIFY_API_SECRET')}: ${selectedApp.apiSecretKeys[0].secret}\n  · ${output.token.green('SCOPES')}: ${app.configuration.scopes}\n    `\n  }\n}\n\nexport async function infoApp(app: App, {format}: Omit<InfoOptions, 'webEnv'>): Promise<output.Message> {\n  if (format === 'json') {\n    return output.content`${JSON.stringify(app, null, 2)}`\n  } else {\n    const appInfo = new AppInfo(app)\n    return appInfo.output()\n  }\n}\n\nconst UNKNOWN_TEXT = output.content`${output.token.italic('unknown')}`.value\nconst NOT_CONFIGURED_TEXT = output.content`${output.token.italic('Not yet configured')}`.value\n\nclass AppInfo {\n  private app: App\n  private cachedAppInfo: store.CachedAppInfo | undefined\n\n  constructor(app: App) {\n    this.app = app\n    this.cachedAppInfo = store.cliKitStore().getAppInfo(app.directory)\n  }\n\n  async output(): Promise<string> {\n    const sections: [string, string][] = [\n      this.devConfigsSection(),\n      this.projectSettingsSection(),\n      this.appComponentsSection(),\n      this.accessScopesSection(),\n      await this.systemInfoSection(),\n    ]\n    return sections.map((sectionContents: [string, string]) => this.section(...sectionContents)).join('\\n\\n')\n  }\n\n  devConfigsSection(): [string, string] {\n    const title = 'Configs for Dev'\n\n    let appName = NOT_CONFIGURED_TEXT\n    let storeDescription = NOT_CONFIGURED_TEXT\n    let apiKey = NOT_CONFIGURED_TEXT\n    let postscript = output.content`💡 These will be populated when you run ${output.token.packagejsonScript(\n      this.app.dependencyManager,\n      'dev',\n    )}`.value\n    if (this.cachedAppInfo) {\n      if (this.cachedAppInfo.title) appName = this.cachedAppInfo.title\n      if (this.cachedAppInfo.storeFqdn) storeDescription = this.cachedAppInfo.storeFqdn\n      if (this.cachedAppInfo.appId) apiKey = this.cachedAppInfo.appId\n      postscript = output.content`💡 To change these, run ${output.token.packagejsonScript(\n        this.app.dependencyManager,\n        'dev',\n        '--reset',\n      )}`.value\n    }\n    const lines = [\n      ['App', appName],\n      ['Dev store', storeDescription],\n      ['API key', apiKey],\n    ]\n    return [title, `${this.linesToColumns(lines)}\\n\\n${postscript}`]\n  }\n\n  projectSettingsSection(): [string, string] {\n    const title = 'Your Project'\n    const lines = [\n      ['Name', this.app.name],\n      ['Root location', this.app.directory],\n    ]\n    return [title, this.linesToColumns(lines)]\n  }\n\n  appComponentsSection(): [string, string] {\n    const title = 'Directory Components'\n\n    let body = `\\n${this.webComponentsSection()}`\n\n    function augmentWithExtensions<TExtension extends Configurable>(\n      extensionTypes: ReadonlyArray<string>,\n      extensions: TExtension[],\n      outputFormatter: (extension: TExtension) => string,\n    ) {\n      extensionTypes.forEach((extensionType: string) => {\n        const relevantExtensions = extensions.filter((extension: TExtension) => {\n          const configurationType = extension.configuration && extension.configuration.type\n          return configurationType === extensionType\n        })\n        if (relevantExtensions[0]) {\n          body += `\\n\\n${output.content`${output.token.subheading(extensionType)}`.value}`\n          relevantExtensions.forEach((extension: TExtension) => {\n            body += `${outputFormatter(extension)}`\n          })\n        }\n      })\n    }\n    augmentWithExtensions(uiExtensions.types, this.app.extensions.ui, this.uiExtensionSubSection.bind(this))\n    augmentWithExtensions(themeExtensions.types, this.app.extensions.theme, this.themeExtensionSubSection.bind(this))\n    augmentWithExtensions(\n      functionExtensions.types,\n      this.app.extensions.function,\n      this.functionExtensionSubSection.bind(this),\n    )\n\n    const invalidExtensions = Object.values(this.app.extensions)\n      .flat()\n      .filter((extension) => !extension.configuration || !extension.configuration.type)\n    if (invalidExtensions[0]) {\n      body += `\\n\\n${output.content`${output.token.subheading('Extensions with errors')}`.value}`\n      invalidExtensions.forEach((extension) => {\n        body += `${this.invalidExtensionSubSection(extension)}`\n      })\n    }\n\n    return [title, body]\n  }\n\n  webComponentsSection(): string {\n    const errors: output.Message[] = []\n    const subtitle = [output.content`${output.token.subheading('web')}`.value]\n    const toplevel = ['📂 web', '']\n    const sublevels: [string, string][] = []\n    this.app.webs.forEach((web) => {\n      if (web.configuration && web.configuration.type) {\n        sublevels.push([`  📂 ${web.configuration.type}`, path.relative(this.app.directory, web.directory)])\n      } else if (this.app.errors) {\n        const error = this.app.errors.getError(`${web.directory}/${configurationFileNames.web}`)\n        if (error) {\n          sublevels.push([`  📂 ${UNKNOWN_TEXT}`, path.relative(this.app.directory, web.directory)])\n          errors.push(error)\n        }\n      }\n    })\n    let errorContent = `\\n${errors.map(this.formattedError).join('\\n')}`\n    if (errorContent.trim() === '') errorContent = ''\n\n    return `${subtitle}\\n${this.linesToColumns([toplevel, ...sublevels])}${errorContent}`\n  }\n\n  uiExtensionSubSection(extension: UIExtension): string {\n    const config = extension.configuration\n    const details = [\n      [`📂 ${config.name}`, path.relative(this.app.directory, extension.directory)],\n      ['     config file', path.relative(extension.directory, extension.configurationPath)],\n    ]\n    if (config && config.metafields.length) {\n      details.push(['     metafields', `${config.metafields.length}`])\n    }\n\n    return `\\n${this.linesToColumns(details)}`\n  }\n\n  functionExtensionSubSection(extension: FunctionExtension): string {\n    const config = extension.configuration\n    const details = [\n      [`📂 ${config.name}`, path.relative(this.app.directory, extension.directory)],\n      ['     config file', path.relative(extension.directory, extension.configurationPath)],\n    ]\n\n    return `\\n${this.linesToColumns(details)}`\n  }\n\n  themeExtensionSubSection(extension: ThemeExtension): string {\n    const config = extension.configuration\n    const details = [\n      [`📂 ${config.name}`, path.relative(this.app.directory, extension.directory)],\n      ['     config file', path.relative(extension.directory, extension.configurationPath)],\n    ]\n\n    return `\\n${this.linesToColumns(details)}`\n  }\n\n  invalidExtensionSubSection(extension: UIExtension | FunctionExtension | ThemeExtension) {\n    const details = [\n      [`📂 ${UNKNOWN_TEXT}`, path.relative(this.app.directory, extension.directory)],\n      ['     config file', path.relative(extension.directory, extension.configurationPath)],\n    ]\n    const error = this.formattedError(this.app.errors!.getError(extension.configurationPath))\n    return `\\n${this.linesToColumns(details)}\\n${error}`\n  }\n\n  formattedError(str: output.Message): string {\n    const [errorFirstLine, ...errorRemainingLines] = output.stringifyMessage(str).split('\\n')\n    const errorLines = [`! ${errorFirstLine}`, ...errorRemainingLines.map((line) => `  ${line}`)]\n    return output.content`${output.token.errorText(errorLines.join('\\n'))}`.value\n  }\n\n  accessScopesSection(): [string, string] {\n    const title = 'Access Scopes in Root TOML File'\n    const lines = this.app.configuration.scopes.split(',').map((scope) => [scope])\n    return [title, this.linesToColumns(lines)]\n  }\n\n  async systemInfoSection(): Promise<[string, string]> {\n    const title = 'Tooling and System'\n    const {platform, arch} = os.platformAndArch()\n    const versionUpgradeMessage = await this.versionUpgradeMessage()\n    const cliVersionInfo = [this.currentCliVersion(), versionUpgradeMessage].join(' ').trim()\n    const lines: string[][] = [\n      ['Shopify CLI', cliVersionInfo],\n      ['Package manager', this.app.dependencyManager],\n      ['OS', `${platform}-${arch}`],\n      ['Shell', process.env.SHELL || 'unknown'],\n      ['Node version', process.version],\n    ]\n    return [title, `${this.linesToColumns(lines)}`]\n  }\n\n  linesToColumns(lines: string[][]): string {\n    const widths: number[] = []\n    for (let i = 0; i < lines[0].length; i++) {\n      const columnRows = lines.map((line) => line[i])\n      widths.push(Math.max(...columnRows.map((row) => output.unstyled(row).length)))\n    }\n    const paddedLines = lines\n      .map((line) => {\n        return line\n          .map((col, index) => {\n            return `${col}${' '.repeat(widths[index] - output.unstyled(col).length)}`\n          })\n          .join('   ')\n          .trimEnd()\n      })\n      .join('\\n')\n    return paddedLines\n  }\n\n  section(title: string, body: string): string {\n    const formattedTitle = `${title.toUpperCase()}${' '.repeat(35 - title.length)}`\n    return output.content`${output.token.heading(formattedTitle)}\\n${body}`.value\n  }\n\n  currentCliVersion(): string {\n    return this.app.nodeDependencies['@shopify/cli']\n  }\n\n  async versionUpgradeMessage(): Promise<string> {\n    const cliDependency = '@shopify/cli'\n    const newestVersion = await dependency.checkForNewVersion(cliDependency, this.currentCliVersion())\n    if (newestVersion) {\n      return output.content`${dependency.getOutputUpdateCLIReminder(this.app.dependencyManager, newestVersion)}`.value\n    }\n    return ''\n  }\n}\n"]}