{"version":3,"file":"urls.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/urls.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAC,MAAM,kBAAkB,CAAA;AAG5D,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,UAAoB,EAAE,YAAoB;IAC1E,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAA;IACjE,IAAI,CAAC,YAAY;QAAE,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAA;IACvE,MAAM,GAAG,GAAG,MAAM,YAAY,EAAE,KAAK,CAAC,EAAC,IAAI,EAAE,YAAY,EAAC,CAAC,CAAA;IAC3D,MAAM,CAAC,OAAO,CAAC,qDAAqD,CAAC,CAAA;IACrE,OAAO,GAAG,CAAA;AACZ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,UAAU,CAAC,MAAc,EAAE,GAAW,EAAE,KAAa;IACzE,MAAM,SAAS,GAAyC;QACtD,MAAM;QACN,MAAM,EAAE,GAAG;QACX,KAAK,EAAE,CAAC,GAAG,GAAG,gBAAgB,EAAE,GAAG,GAAG,wBAAwB,EAAE,GAAG,GAAG,oBAAoB,CAAC;KAC5F,CAAA;IAED,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,eAAe,CAAA;IACzC,MAAM,MAAM,GAAsC,MAAM,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,CAAA;IACrG,IAAI,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;QAC1C,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACnF,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;KAC9B;AACH,CAAC","sourcesContent":["import {api, error, output, plugins} from '@shopify/cli-kit'\nimport {Plugin} from '@oclif/core/lib/interfaces'\n\nexport async function generateURL(pluginList: Plugin[], frontendPort: number): Promise<string> {\n  const tunnelPlugin = await plugins.lookupTunnelPlugin(pluginList)\n  if (!tunnelPlugin) throw new error.Bug('The tunnel could not be found')\n  const url = await tunnelPlugin?.start({port: frontendPort})\n  output.success('The tunnel is running and you can now view your app')\n  return url\n}\n\nexport async function updateURLs(apiKey: string, url: string, token: string): Promise<void> {\n  const variables: api.graphql.UpdateURLsQueryVariables = {\n    apiKey,\n    appUrl: url,\n    redir: [`${url}/auth/callback`, `${url}/auth/shopify/callback`, `${url}/api/auth/callback`],\n  }\n\n  const query = api.graphql.UpdateURLsQuery\n  const result: api.graphql.UpdateURLsQuerySchema = await api.partners.request(query, token, variables)\n  if (result.appUpdate.userErrors.length > 0) {\n    const errors = result.appUpdate.userErrors.map((error) => error.message).join(', ')\n    throw new error.Abort(errors)\n  }\n}\n"]}