{"version":3,"file":"cli.js","sourceRoot":"","sources":["../../../../src/cli/utilities/extensions/cli.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,uBAAuB,EAAC,MAAM,aAAa,CAAA;AACnD,OAAO,EAAC,uBAAuB,EAAC,MAAM,sBAAsB,CAAA;AAC5D,OAAO,EAAC,WAAW,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAC,MAAM,kBAAkB,CAAA;AACjE,OAAO,EAAC,aAAa,EAAC,MAAM,KAAK,CAAA;AAEjC,IAAI,QAAQ,GAAG,KAAK,CAAA;AACpB,IAAI,KAAK,GAAG,KAAK,CAAA;AAEjB,MAAM,8BAA8B,GAAG,GAAG,EAAE;IAC1C,OAAO,IAAI,KAAK,CAAC,GAAG,CAAC,sDAAsD,CAAC,CAAA;AAC9E,CAAC,CAAA;AAED;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,kBAAkB,CAAC,IAAc,EAAE,UAAsC,EAAE;IAC/F,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,EAAC,KAAK,EAAE,GAAG,EAAE,GAAE,CAAC,EAAC,CAAA;IAClD,IAAI,uBAAuB,EAAE,EAAE;QAC7B,MAAM,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAChC,WAAW,CAAC,KAAK,CAAC,aAAa,EAAE,EACjC,+CAA+C,CAChD,CAAA;QACD,MAAM,CAAC,KAAK,CAAC,6BAA6B,gBAAgB,EAAE,CAAC,CAAA;QAC7D,IAAI;YACF,IAAI,QAAQ,EAAE;gBACZ,wDAAwD;gBACxD,OAAO,CAAC,KAAK,EAAE;oBACb,4CAA4C;oBAC5C,MAAM,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;iBACtB;aACF;iBAAM;gBACL,QAAQ,GAAG,IAAI,CAAA;gBACf,MAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAA;gBAC1C,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,EAAE;oBACnC,GAAG,OAAO;oBACV,MAAM,EAAE,SAAS;oBACjB,MAAM,EAAE,SAAS;oBACjB,GAAG,EAAE,gBAAgB;iBACtB,CAAC,CAAA;gBACF,KAAK,GAAG,IAAI,CAAA;gBACZ,MAAM,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAA;aACnD;YACD,MAAM,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,oBAAoB,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,CAAA;SACpF;QAAC,MAAM;YACN,MAAM,IAAI,KAAK,CAAC,WAAW,EAAE,CAAA;SAC9B;KACF;SAAM;QACL,MAAM,UAAU,GAAG,MAAM,uBAAuB,EAAE,CAAA;QAClD,MAAM,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,OAAO,CAAC,CAAA;KAClD;AACH,CAAC;AAED;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,qBAAqB;IACzC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;IACxD,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,0CAA0C,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,GAAG,EAAC,CAAC,CAAA;IACzG,IAAI,CAAC,cAAc,EAAE;QACnB,MAAM,8BAA8B,EAAE,CAAA;KACvC;IACD,OAAO,cAAc,CAAA;AACvB,CAAC","sourcesContent":["import {getBinaryPathOrDownload} from './binary.js'\nimport {useExtensionsCLISources} from '../../environment.js'\nimport {environment, error, path, system} from '@shopify/cli-kit'\nimport {fileURLToPath} from 'url'\n\nlet building = false\nlet built = false\n\nconst NodeExtensionsCLINotFoundError = () => {\n  return new error.Bug(`Couldn't find the shopify-cli-extensions Node binary`)\n}\n\n/**\n * This function runs the extensions' CLI and has support for running\n * it through its source code when the SHOPIFY_USE_EXTENSIONS_CLI_SOURCES=1 variable\n * is set.\n * @param args {string[]} Arguments to pass to the CLI\n * @param options {system.ExecOptions} Options to configure the process execution.\n */\nexport async function runGoExtensionsCLI(args: string[], options: system.WritableExecOptions = {}) {\n  const stdout = options.stdout || {write: () => {}}\n  if (useExtensionsCLISources()) {\n    const projectDirectory = path.join(\n      environment.local.homeDirectory(),\n      'src/github.com/shopify/shopify-cli-extensions',\n    )\n    stdout.write(`Using extensions CLI from ${projectDirectory}`)\n    try {\n      if (building) {\n        // eslint-disable-next-line no-unmodified-loop-condition\n        while (!built) {\n          // eslint-disable-next-line no-await-in-loop\n          await system.sleep(1)\n        }\n      } else {\n        building = true\n        stdout.write('Building extensions CLI...')\n        await system.exec('make', ['build'], {\n          ...options,\n          stdout: undefined,\n          stderr: undefined,\n          cwd: projectDirectory,\n        })\n        built = true\n        stdout.write('Built extensions CLI successfully!')\n      }\n      await system.exec(path.join(projectDirectory, 'shopify-extensions'), args, options)\n    } catch {\n      throw new error.AbortSilent()\n    }\n  } else {\n    const binaryPath = await getBinaryPathOrDownload()\n    await system.exec(binaryPath, [...args], options)\n  }\n}\n\n/**\n * The extensions' CLI is comprised by a Go and Node executable. The latter is distributed\n * as an NPM package, @shopify/shopify-cli-extensions, which is dependency of @shopify/app.\n * This method looks up the binary under node_modules/.bin and returns its path.\n * @returns {Promise<string>} A promise that resolves with the path to the Node executable.\n */\nexport async function nodeExtensionsCLIPath(): Promise<string> {\n  const cwd = path.dirname(fileURLToPath(import.meta.url))\n  const executablePath = await path.findUp('node_modules/.bin/shopify-cli-extensions', {type: 'file', cwd})\n  if (!executablePath) {\n    throw NodeExtensionsCLINotFoundError()\n  }\n  return executablePath\n}\n"]}