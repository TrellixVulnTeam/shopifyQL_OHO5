import { dependency } from '@shopify/cli-kit';
export declare const configurationFileNames: {
    readonly app: "shopify.app.toml";
    readonly extension: {
        readonly ui: "shopify.ui.extension.toml";
        readonly theme: "shopify.theme.extension.toml";
        readonly function: "shopify.function.extension.toml";
    };
    readonly web: "shopify.web.toml";
};
export declare const dotEnvFileNames: {
    production: string;
};
export declare const environmentVariables: {
    /**
     * Environment variable to instructs the CLI on running the extensions' CLI through its sources.
     */
    readonly useExtensionsCLISources: "SHOPIFY_USE_EXTENSIONS_CLI_SOURCES";
};
export declare const versions: {
    readonly extensionsBinary: "v0.20.2";
    readonly react: "^17.0.0";
};
export declare const blocks: {
    readonly extensions: {
        readonly directoryName: "extensions";
        readonly configurationName: {
            readonly ui: "shopify.ui.extension.toml";
            readonly theme: "shopify.theme.extension.toml";
            readonly function: "shopify.function.extension.toml";
        };
    };
    readonly functions: {
        readonly defaultUrl: "https://github.com/Shopify/function-examples";
        readonly defaultLanguage: "wasm";
        readonly maxCompilationStatusCheckCount: 7;
        readonly compilationStatusWaitMs: 2000;
    };
    readonly web: {
        readonly directoryName: "web";
        readonly configurationName: "shopify.web.toml";
    };
};
/**
 * List of extensions for each category that are limited by quantity, only 1 of each is allowed per app
 */
export declare const limitedExtensions: {
    ui: UIExtensionTypes[];
    theme: ThemeExtensionTypes[];
    function: FunctionExtensionTypes[];
};
export declare const publicFunctionExtensions: {
    readonly types: readonly ["product_discounts", "order_discounts", "shipping_discounts"];
};
export declare const functionExtensions: {
    readonly types: readonly ["product_discounts", "order_discounts", "shipping_discounts", "payment_methods", "shipping_rate_presenter"];
};
export declare const functionExtensionTemplates: {
    name: string;
    value: string;
}[];
export declare function isFunctionExtensionType(extensionType: string): boolean;
export declare const publicUIExtensions: {
    readonly types: readonly ["product_subscription", "checkout_ui_extension", "checkout_post_purchase", "web_pixel_extension"];
};
export declare const uiExtensions: {
    readonly types: readonly ["product_subscription", "checkout_ui_extension", "checkout_post_purchase", "web_pixel_extension", "pos_ui_extension"];
};
export declare const activeUIExtensions: {
    types: {
        <S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[];
        (predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[];
    };
};
export declare type UIExtensionTypes = typeof uiExtensions.types[number];
export declare const uiExtensionTemplates: {
    name: string;
    value: string;
}[];
export declare function isUiExtensionType(extensionType: string): boolean;
export declare const themeExtensions: {
    readonly types: readonly ["theme"];
};
export declare type ThemeExtensionTypes = typeof themeExtensions.types[number];
export declare function isThemeExtensionType(extensionType: string): boolean;
export declare type FunctionExtensionTypes = typeof functionExtensions.types[number];
export declare const extensions: {
    types: ("product_subscription" | "checkout_ui_extension" | "checkout_post_purchase" | "web_pixel_extension" | "pos_ui_extension" | "theme" | "product_discounts" | "order_discounts" | "shipping_discounts" | "payment_methods" | "shipping_rate_presenter")[];
    publicTypes: ("product_subscription" | "checkout_ui_extension" | "checkout_post_purchase" | "web_pixel_extension" | "theme" | "product_discounts" | "order_discounts" | "shipping_discounts")[];
};
export declare type ExtensionTypes = typeof extensions.types[number];
export declare function extensionTypeCategory(extensionType: ExtensionTypes): 'theme' | 'function' | 'ui';
/**
 * Given a extension type, it returns the extension point name that's necessary
 * when interacting when the API.
 * @param type {FunctionExtensionTypes} Function extension type.
 * @returns {string} Extension point name.
 */
export declare const getFunctionExtensionPointName: (type: FunctionExtensionTypes) => "PRODUCT_DISCOUNTS" | "ORDER_DISCOUNTS" | "SHIPPING_DISCOUNTS" | "PAYMENT_METHODS" | "SHIPPING_METHODS";
/**
 * Returns the runtime renderer dependency for a given UI extension type.
 * @param extensionType {UIExtensionTypes} Extension type.
 * @returns The renderer dependency that should be present in the app's package.json
 */
export declare function getUIExtensionRendererDependency(extensionType: UIExtensionTypes): dependency.DependencyVersion | undefined;
export declare const extensionTypesHumanKeys: {
    readonly types: readonly ["web pixel", "post-purchase UI", "theme app extension", "checkout UI", "POS UI", "subscription UI", "product discount", "order discount", "shipping discount", "payment customization", "delivery option presenter"];
};
export declare type ExtensionTypesHumanKeys = typeof extensionTypesHumanKeys.types[number];
export interface ExtensionOutputConfig {
    humanKey: ExtensionTypesHumanKeys;
    helpURL?: string;
    additionalHelp?: string;
}
export declare function getExtensionOutputConfig(extensionType: ExtensionTypes): ExtensionOutputConfig;
export declare function getExtensionTypeFromHumanKey(humanKey: ExtensionTypesHumanKeys): ExtensionTypes;
